.\" Manpage for cpumico32.
.\" Contact simon@anita-simulators.org.uk to correct errors or typos.
.TH man 1 "29 March 2017" "1.0" "nuseradd man page"
.SH NAME
cpumico32 \- LatticeMico32 instruction set simulator
.SH SYNOPSIS
.B cpumico32 
[-g] [-v] [-x] [-d] [-D] [-I] [-n <num>] [-b <addr>]
          [-r <addr>] [-R <#bytes>] [-f <fname>] [-m <#bytes>] 
          [-o <addr>] [-e <addr>] [-l <fname>] [-c <cfg_word> ] 
          [-w <waits>] [-i <fname>] [-T]
.SH DESCRIPTION
.LP
cpumico32 is an instruction set simulator of the LatticMico32 MCU. It 
implements all the core instructions and optional instructions can be 
configured to be enabled or disabled (e.g. muliply, or shift). All 32 
external interrupts are implemented and the breakpoint and watchdog 
registers are present. No caches are yet included. The model is extensible 
(from source code), via callback functions to trap memory accesses
and generate external interrupts. 

The ISS takes 32 bit elf executable files as input, which can be created
via a suitably configured and compiled gcc toolchain (lm32-elf-as, lm32-elf-ld and lm32-elf-gcc).
A gcc toolchain is available for download on the Lattice website (www.latticesemi.com).

A verbose disassembled output is available to follow program flow, and registers can be
dumped at the end of program execution, as well as a dump of internal memory. A straight
disassemble of the code can be selected which gives the verbose output, but linearly
from the lowest address to the top of memory, disassembling text regions specified
in the elf file. A fragment of disassembled output is shown below:


    0x0214: (0x3819fffc)   ori      r25, r0,  0xfffc   
    0x0218: (0x5b380000)   sw       (r25+00000), r24   
    0x021c: (0x38010001)   ori      r1,  r0,  0x0001   
    0x0220: (0xd0010000)   wcsr     IE  , r1           
    0x0224: (0x38030001)   ori      r3,  r0,  0x0001   
    0x0228: (0x38020000)   ori      r2,  r0,  0x0000   
    0x022c: (0x78422000)   orhi     r2,  r2,  0x2000   
    0x0230: (0x38140000)   ori      r20, r0,  0x0000   
    0x0234: (0xd0200000)   wcsr     IM  , r0           
    0x0238: (0x38040014)   ori      r4,  r0,  0x0014   
    0x023c: (0x58430000)   sw       (r2 +00000), r3    
    0x0240: (0x58400004)   sw       (r2 +00004), r0    
    0x0244: (0x3484ffff)   addi     r4,  r4,  -00001   

The ISS makes an approximation of time using the issue cycles and 
result cycles associated with each instruction, as defined in the
LatticeMico32 reference manual. Each instruction executed will advance
the cycle count by at least its issue cycles, as the next instruction
cannot be executed before this time. In addition, if it updates a 
register then the result cycles value plus the current cycle count is
stored for the target register. This is the earliest time that a
future instruction can access this register. When an instruction is
executed, its source registers (RY and, if applicable, RZ) have their
availability times checked, and the cycle count is advanced to the
time of the latest register's availability.
This timing model does not take into account branch prediction, and uses
the issue cycle numbers for 'taken' and 'not taken' unmodified, as defined
in the reference manual.
The internal cycle count is also used as the basis for the CC register 
value. Since this register can be changed by software, but the cycle
count needs to run continuously, the CC value is emulated by keeping
a track of the offset from cycle count and the last programmed value,
such that a read of the CC register will be correct, whilst still being
based on the internal cycle count. This means only a single source is
used for all timing.

The model can be configured using the command line options, as described
below, but a configuration '.ini' file can be specified to use as the source
of configuration. An example .ini file is shown below, with every option
specified, though nono-default options need be specified. The values shown
in the example below are the default values.


    ; This is an example lm32cpu.ini file
    [program]
    filename=test.elf
    entry_point_addr=-1

    [debug]
    log_fname=stdout
    test_mode=false
    verbose=false
    ram_dump_addr=-1
    ram_dump_bytes=0
    dump_registers=false
    dump_num_exec_instr=false
    disassemble_run=false

    [breakpoints]
    user_break_addr=-1
    num_run_instructions=-1
    disable_reset_break=true
    disable_hw_break=true
    disable_lock_break=false

    [memory]
    mem_size=65536
    mem_wait_states=0

    [dcache]
    cache_base_addr=0
    cache_limit=0x0fffffff
    cache_num_sets=512
    cache_num_ways=1
    cache_bytes_per_line=4

    [icache]
    cache_base_addr=0
    cache_limit=0x0fffffff
    cache_num_sets=512
    cache_num_ways=1
    cache_bytes_per_line=4

Note that the only way to change the default settings of the caches is to use
a '.ini' file. Also note that the command line options *override* the .ini 
settings. The 'Boolean' options must be set as 'true' or 'false' and are
case sensitive, as are the section and parameter names. The log_fname option
can be any valid filename, or 'stdout' (as shown in the example file). 
The options with -1 indicate either that the option is disabled (ram_dump_addr,
user_break_addr), using the default (entry_point_addr), or the the parameter 
is 'infinite' (num_run_instructions). Otrherwise, a positive integervalue is required.
The range of the other options, such as the cache options, are as per the 
LatticeMico32 Processor Reference Manual.


.SH OPTIONS
.TP 5
.B -g 
Run the program in GDB remote debug mode (linux only). The program will open a pseudo
terminal and print the device path, which gdb can the attach to as a remote target.
The CPU does not start executing, and this is controlled from within GDB once
connection is established. Default is non-debugging.
.TP 5
.BI -n " num"
Specify number of instructions to run. Default is to run forever
.TP 5
.BI -b " addr"
Specify address for breakpoint. Default is no breakpoint.
.TP 5
.BI -f " filename"
Specify executable ELF file. Default is test.elf
.TP 5
.BI -l " filename"
Specify log file for output. Default is to dump output to stdout.
.TP 5
.BI -m " num_bytes"
Specify size of internal memory in bytes. Default is 65536 bytes.
.TP 5
.BI -w " num_bytes"
Specify the number of wait states applied to accesses internal memory. Default is 0 wait states.
.TP 5
.B -v  
Specify verbose output. This turns on disassembly output, with addressing and cycle count, as well as instruction execution. 
Default is off.
.TP 5
.B -x 
Enable disassemble mode. This runs through the program outputing diassembled code, as for verbose, but does not execute the code 
and runs from the start address to the finish of the program. Default is disabled.
.TP 5
.B -d 
Disable breaking on lock condition. Various 'jump to self' conditions are detected and flagged as breakpoints unless this option 
is specified.  Default is enabled.
.TP 5
.BI -r " addr"
Address to dump value from internal ram after completion. Address is forced to be aligned with word boundary. Default is no dump.
.TP 5
.BI -R " num_bytes"
Number of bytes to dump from RAM if -r specified. Number rounded up to multiples of 4 bytes. Default is 4 bytes.
.TP 5
.BI -o " addr"
Address offset of internal memory (if memory size not 0). Default is 0x00000000.
.TP 5
.BI -e " addr"
Entry point address (i.e. reset address). Default is 0x00000000.
.TP 5
.B -D 
Dump registers after program execution completion. Default is no dump.
.TP 5
.B -I 
Dump the number of executed instructions after execution has completed. Default is no dump.
.TP 5
.BI -c " config_word"
Set configuration word value to enable/disable features. The config value is a 32 bit word mathing the bit fields of the 
LatticeMico32 CFG register.  Not all fields are writable, and setting them will have no effect. Can be used to enable/disable 
features, set the number of external interrupts, set the number of breakpoint and watchdog registers etc.
.TP 5
.B -i 
Specify a .ini file to use for model configuration. Default no .ini file.
.TP 5
.B -T 
Enable internal callback functions for test (default disabled)
.SH SEE ALSO
libmico32(3) gcc(1) as(1)
.SH BUGS
No known bugs.
.SH AUTHOR
Simon Southwell (simon@anita-simulators.org.uk)
